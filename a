diff --git a/.gitignore b/.gitignore
index a1c2a23..36e158b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -21,3 +21,9 @@
 
 # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
 hs_err_pid*
+
+.idea
+comline-todo-app.iml
+
+target/*
+out/
diff --git a/README.md b/README.md
index b554bcf..9f43560 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,10 @@
 # comline-todo-app
 Command line app for learning java purpose
+
+## Brain dump
+
+It is obvious that this program absolutely has to write data
+to some file or database. 
+It also should be interactive. So there is gonna be a menu, user
+will choose an option and move on to the next step.
+For now... on-interactive version will only display current tasks.
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..1add730
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,99 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <groupId>com.mycompany.app</groupId>
+  <artifactId>comline-todo-app</artifactId>
+  <version>1.0-SNAPSHOT</version>
+
+  <name>comline-todo-app</name>
+  <!-- FIXME change it to the project's website -->
+  <url>http://www.example.com</url>
+
+  <properties>
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <maven.compiler.source>1.8</maven.compiler.source>
+    <maven.compiler.target>1.8</maven.compiler.target>
+
+    <main.class>com.mycompany.app.Main</main.class>
+  </properties>
+
+  <dependencies>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.11</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.10.1</version>
+        <configuration>
+            <source>${maven.compiler.source}</source>
+            <target>${maven.compiler.target}</target>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-shade-plugin</artifactId>
+        <version>3.2.4</version>
+        <executions>
+          <execution>
+            <phase>package</phase>
+            <goals>
+              <goal>shade</goal>
+            </goals>
+            <configuration>
+              <shadedArtifactAttached>true</shadedArtifactAttached>
+              <shadedClassifierName>uber</shadedClassifierName>
+              <transformers>
+                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+                  <manifestEntries>
+                    <Main-Class>${main.class}</Main-Class>
+                    <Add-Opens>java.base/java.lang</Add-Opens>
+                  </manifestEntries>
+                </transformer>
+              </transformers>
+              <filters>
+                <filter>
+                  <artifact>*:*</artifact>
+                  <excludes>
+                    <exclude>META-INF/*.SF</exclude>
+                    <exclude>META-INF/*.RSA</exclude>
+                  </excludes>
+                </filter>
+              </filters>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <groupId>com.oneops.maven.plugins</groupId>
+        <artifactId>really-executable-jar-maven-plugin</artifactId>
+        <version>1.4.2</version>
+        <executions>
+          <execution>
+            <phase>package</phase>
+            <goals>
+              <goal>really-executable-jar</goal>
+            </goals>
+          </execution>
+        </executions>
+        <configuration>
+          <flags>-Xmx128m -client</flags>
+          <classifier>uber</classifier>
+          <outputClassifier>executable</outputClassifier>
+          <allowOtherTypes>true</allowOtherTypes>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
diff --git a/src/main/java/com.mycompany.app.InterMode.java b/src/main/java/com.mycompany.app.InterMode.java
new file mode 100644
index 0000000..50ac028
--- /dev/null
+++ b/src/main/java/com.mycompany.app.InterMode.java
@@ -0,0 +1,6 @@
+/**
+ * Created by psb on 08.04.22.
+ */
+public class com.mycompany.app.InterMode {
+
+}
diff --git a/src/main/java/com/mycompany/app/Main.java b/src/main/java/com/mycompany/app/Main.java
new file mode 100644
index 0000000..91869ee
--- /dev/null
+++ b/src/main/java/com/mycompany/app/Main.java
@@ -0,0 +1,40 @@
+package com.mycompany.app;
+
+import java.util.Scanner;
+
+public class Main {
+    //File name to store the data
+    public static String fileName = "list.txt";
+
+    public static void main(String[] args) {
+
+        Todo todo = new Todo();
+
+        ParseArgs();
+
+
+
+        todo.printMenu();
+
+        String userChoice = "";
+        Scanner inp = new Scanner(System.in);
+
+        while (!userChoice.equals("4")) {
+            userChoice = inp.nextLine();
+            switch (userChoice) {
+                case "1":
+                    todo.showTasks();
+                    break;
+                case "2":
+                    todo.addTask();
+                    break;
+                case "3":
+                    todo.deleteTask();
+                    break;
+                default:
+                    todo.bye();
+                    System.exit(0);
+            }
+        }
+    }
+}
diff --git a/src/main/java/com/mycompany/app/ParseArgs.java b/src/main/java/com/mycompany/app/ParseArgs.java
new file mode 100644
index 0000000..2078c23
--- /dev/null
+++ b/src/main/java/com/mycompany/app/ParseArgs.java
@@ -0,0 +1,8 @@
+package com.mycompany.app;
+
+/**
+ * Created by psb on 08.04.22.
+ */
+public class ParseArgs {
+
+}
diff --git a/src/main/java/com/mycompany/app/Todo.java b/src/main/java/com/mycompany/app/Todo.java
new file mode 100644
index 0000000..81d967f
--- /dev/null
+++ b/src/main/java/com/mycompany/app/Todo.java
@@ -0,0 +1,66 @@
+package com.mycompany.app;
+
+import java.util.ArrayList;
+import java.util.Scanner;
+
+public class Todo {
+    public static final String ANSI_RESET = "\u001B[0m";
+    public static final String ANSI_RED = "\u001B[31m";
+    public static final String ANSI_GREEN = "\u001B[32m";
+    public static final String ANSI_YELLOW = "\u001B[33m";
+    public static final String ANSI_PURPLE = "\u001B[35m";
+    public static final String ANSI_CYAN = "\u001B[36m";
+
+    private ArrayList<String> list;
+    private final String mainMenu = ANSI_CYAN
+                                  + "\n\t\tMenu\n\n"
+                                  + "\t1 - List tasks\n"
+                                  + "\t2 - Add task\n"
+                                  + "\t3 - Delete task\n"
+                                  + "\t4 - Exit\n"
+                                  + ANSI_RESET;
+    //Creates array list
+    public Todo() {
+        list = new ArrayList<>();
+    }
+    //Prints main menu
+    public void printMenu() {
+        System.out.println(mainMenu);
+    }
+    public void bye() {
+        System.out.println(ANSI_PURPLE + "Bye!" + ANSI_RESET);
+    }
+
+    //Prints tasks from current list
+    public void showTasks(){
+        if(!list.isEmpty()) {
+            for (int i = 0; i < list.size(); i++) {
+                String s = list.get(i);
+                System.out.println((i + 1) + " " + s);
+            }
+        } else System.out.println(ANSI_RED + "List is empty" + ANSI_RESET);
+    }
+    //Adds task to the list
+    public void addTask() {
+        System.out.println(ANSI_CYAN + "Enter new task\n" + ANSI_RESET);
+        Scanner s = new Scanner(System.in);
+        String newTask = s.nextLine();
+        list.add(newTask);
+        System.out.println(ANSI_CYAN + "New task added successfully\n" + ANSI_RESET);
+    }
+    //Removes task from the list
+    public void deleteTask() {
+        if(!list.isEmpty()) {
+            this.showTasks();
+            Scanner s = new Scanner(System.in);
+            System.out.println(ANSI_CYAN + "Enter task number to delete" + ANSI_RESET);
+            if(s.hasNextInt()) {
+                int num = s.nextInt();
+                if (num <= list.size())
+                    list.remove(num -1);
+                else System.out.println(ANSI_RED + "Number is out of list" + ANSI_RESET);
+            } else System.out.println(ANSI_RED + "Wrong number!\n" + ANSI_RESET);
+        } else
+            System.out.println(ANSI_YELLOW + "There are currently no tasks!" + ANSI_RESET);
+    }
+}
diff --git a/src/main/main.iml b/src/main/main.iml
new file mode 100644
index 0000000..908ad4f
--- /dev/null
+++ b/src/main/main.iml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/src/test/java/com/mycompany/app/AppTest.java b/src/test/java/com/mycompany/app/AppTest.java
new file mode 100644
index 0000000..b3a46fb
--- /dev/null
+++ b/src/test/java/com/mycompany/app/AppTest.java
@@ -0,0 +1,20 @@
+package src.test.java.com.mycompany.app;
+
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
+/**
+ * Unit test for simple Main.
+ */
+public class AppTest 
+{
+    /**
+     * Rigorous Test :-)
+     */
+    @Test
+    public void shouldAnswerWithTrue()
+    {
+        assertTrue( true );
+    }
+}
diff --git a/xxx.java b/xxx.java
deleted file mode 100644
index e5cb019..0000000
--- a/xxx.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class xxx {
-    public static void main(String[] args) {
-        //Check if arguments exist
-        if(args.length != 0) {
-            //First arg must be 'show', 'add' or 'remove'
-            String command = args[0];
-            switch (command){
-                case "show":
-                    System.out.println("SHOW TBD");
-                break;
-                case "add":
-                    System.out.println("ADD TBD");
-                break;
-                case "remove":
-                    System.out.println("REMOVE TBD");
-                break;
-                default:
-                    System.out.println(command+": unknown command");
-                    System.exit(0);
-            }
-            //Print args
-            for (String arg : args) {
-                System.out.println(arg);
-            }
-        }
-        else{
-            System.out.println("This is going to be a tool to do TODO.\n");
-            System.out.println("Usage:\n\n\txxx <command> [arguments]\n");
-            System.out.println("The commands are:\n\t\n \tshow\n \tadd\n \tremove\n");
-
-        }
-    }
-}
-
